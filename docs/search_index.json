[
["index.html", "Applied SNA with R Chapter 1 Prerequisites", " Applied SNA with R George G. Vega Yon 2018-01-19 Chapter 1 Prerequisites Install R from CRAN: https://www.r-project.org/ (optional) Install Rstudio: https://rstudio.org While I find RStudio extreamly useful, it is not necesary to use it with R. "],
["intro.html", "Chapter 2 Introduction", " Chapter 2 Introduction This book will be build as part of a workshop on Applied Social Network Analysis with R. Its contents will be populated as the sessions take place, and for now there is particular program that we will follow, instead, we have the following workflow: Participants will share their data and what they need to do with it. Based on their data, I’ll be preparing the sessions trying to show attendees how would I approach the problem, and at the same time, teach by example about the R language. Materials will be published on this website and, hopefully, video recordings of the sessions. At least in the first version, the book will be organized by session, this is, one chapter per session. In general, we will besides of R itself, we will be using R studio and the following R packages: dplyr for data management, stringr for data cleaning, and of course igraph, netdiffuseR (a bit of a bias here), and statnet for our neat network analysis.1 Some of you may be wondering “what about ggplot2 and friends? What about tidyverse”, well, my short answer is I jumped into R before all of that was that popular. When I started plots were all about lattice, and after a couple of years on that, about base R graphics. What I’m saying is that so far I have not find a compelling reason to leave my “old-practices” and embrace all the tidyverse movement (religion?).↩ "],
["r-basics.html", "Chapter 3 R Basics 3.1 What is R 3.2 How to install packages", " Chapter 3 R Basics 3.1 What is R 3.2 How to install packages Nowadays there are two ways of installing R packages (that I’m aware of), either using install.packages, which is a function shipped with R, or use the devtools R package to install a package from some remote repository other than CRAN, here is a couple of examples: # This will install the igraph package from CRAN &gt; install.packages(&quot;netdiffuseR&quot;) # This will install the bleeding-edge version from the project&#39;s github repo! &gt; devtools::install_github(&quot;USCCANA/netdiffuseR&quot;) The first one, using install.packages, installs the CRAN version of netdiffuseR, whereas the second installs whatever version is plublished on https://github.com/USCCANA/netdiffuseR, which is usually called the development version. In some cases users may want/need to install packages from command line as some packages need extra configuration to be installed. But we won’t need to look at it now. "],
["week-1-sns-study.html", "Chapter 4 Week 1: SNS Study 4.1 The Social Network Study 4.2 Reading the data", " Chapter 4 Week 1: SNS Study 4.1 The Social Network Study 4.2 Reading the data R has several ways of reading data in. You data can be Raw plain files like CSV, tab delimited or specified by column width, for which you can use the readr package; or it can be binary files like dta (Stata), Octave, SPSS, for which foreign can be used; or it could be excel files in which case you should be using readxl. In our case, the data for this session is in Stata13 format, and so we will be using readstata13. library(dplyr) library(magrittr) library(readstata13) # Reading the data dat &lt;- read.dta13(&quot;SNS datamerged081315edited.dta&quot;) # Taking a look at the file head(dat[,1:5]) ## t4_SubjectID School photoid sch_friend41 sch_friend42 ## 1 411104010 111 1 347 420 ## 2 411103015 111 2 424 205 ## 3 411603020 111 7 NA 505 ## 4 411103026 111 13 608 387 ## 5 411103016 111 14 NA NA ## 6 411502003 111 15 NA 265 For now, we won’t be using all ~2,000 columns of this data (which is mostly because we have a wide format dataset here), so we need to filter all this data. In order to do so, we can use the select function from the dplyr package dat_filtered &lt;- select( dat, School, photoid, matches(&quot;^sch_friend.+&quot;) ) The function matches allows us using regular expressions to select variables (reguwhat!?). Regular expressions are, as I once overheard, the poor man’s RA. In this case, instead of us having to look for all the variables that start with the pattern sch_friend, we use regular expressions to catch that, character by character, we have: ^: Line start sch_friend: Followed by sch_friend .+: Followed by anything not null. We will see more of this in the future. Now, if you don’t want to use dplyr to do this simple variable selection, you can always use the base R function subset. The following example is equivalent to what we just did using dplyr::select, although it can be slower2 dat_filtered &lt;- subset( dat, select = c( &quot;School&quot;, &quot;photoid&quot;, colnames(dat)[grepl(&quot;sch_friend.+&quot;, colnames(dat))] ) ) As you can see, the dplyr syntax is more clear. Now suppose that we want to create a unique id using the school and photo id. In this case, since both variables are numeric, a good way of doing it is to encode the id such that, for example, the last three x numbers are the photoid and the first ones are the school id. To do this we need to take into account the range of the variables. Here, photoid has the following range: (photo_id_ran &lt;- range(dat_filtered$photoid)) ## [1] 1 2074 As the variable spans up to 2074, we need to set the last 4 units of the variable to store the photoid. Again, we use dplyr to create this variable, and we will call it… id (mind blowing, right?): (dat_filtered %&lt;&gt;% mutate(id = School*10000 + photoid)) %&gt;% head %&gt;% select(School, photoid, id) ## School photoid id ## 1 111 1 1110001 ## 2 111 2 1110002 ## 3 111 7 1110007 ## 4 111 13 1110013 ## 5 111 14 1110014 ## 6 111 15 1110015 Wow, what happend in the last three lines of code! What is that %&gt;%? Well, that’s the piping operator, and it is a very nice way of writing nested function calls. In this case, instead of having write something like dat_filtered$id &lt;- dat_filtered$School*10000 + dat_filtered$photoid subset(head(dat_filtered), select = c(School, photoid, id)) str(dat_filtered) ## &#39;data.frame&#39;: 2164 obs. of 79 variables: ## $ School : int 111 111 111 111 111 111 111 111 111 111 ... ## $ photoid : int 1 2 7 13 14 15 20 22 25 27 ... ## $ sch_friend41 : int 347 424 NA 608 NA NA 79 37 NA 95 ... ## $ sch_friend42 : int 420 205 505 387 NA 265 214 258 185 166 ... ## $ sch_friend43 : int 442 536 NA 93 599 NA 440 71 NA 248 ... ## $ sch_friend44 : int 257 NA NA 119 NA 313 NA 143 NA 330 ... ## $ sch_friend45 : int NA 36 NA 627 134 339 NA 427 NA 346 ... ## $ sch_friend46 : int NA NA NA 610 NA NA NA 470 NA NA ... ## $ sch_friend47 : int NA NA NA 569 377 NA NA 371 NA NA ... ## $ sch_friend48 : int NA NA NA NA 41 NA 188 NA NA NA ... ## $ sch_friend49 : int NA NA NA NA 233 NA 278 NA NA NA ... ## $ sch_friend410: int NA NA NA NA 494 NA NA NA NA NA ... ## $ sch_friend411: int NA NA NA NA NA NA NA NA NA NA ... ## $ sch_friend412: int NA NA NA NA NA NA NA NA NA NA ... ## $ sch_friend413: int NA NA NA NA NA NA NA NA NA NA ... ## $ sch_friend414: int NA NA NA NA NA NA 544 NA NA NA ... ## $ sch_friend415: int NA NA NA NA NA NA 109 NA NA NA ... ## $ sch_friend416: int NA NA NA NA NA NA 110 NA NA NA ... ## $ sch_friend417: int NA NA NA NA NA NA NA NA NA NA ... ## $ sch_friend418: int NA NA NA NA NA NA NA NA NA NA ... ## $ sch_friend419: int NA NA NA NA NA NA NA NA NA NA ... ## $ sch_friend31 : int 347 NA NA 608 41 313 363 470 NA 144 ... ## $ sch_friend32 : int 442 NA 629 387 118 452 79 258 NA 297 ... ## $ sch_friend33 : int 279 NA 505 NA 68 NA NA 259 NA 411 ... ## $ sch_friend34 : int 188 NA NA NA 233 199 NA 167 NA NA ... ## $ sch_friend35 : int 198 NA NA NA NA NA NA 373 NA 346 ... ## $ sch_friend36 : int 346 NA NA NA NA 549 NA 71 NA NA ... ## $ sch_friend37 : int NA NA NA NA NA 319 NA 427 NA NA ... ## $ sch_friend38 : int 241 NA 380 522 10 506 49 NA NA NA ... ## $ sch_friend39 : int 420 NA NA 606 NA 49 53 NA NA 461 ... ## $ sch_friend310: int 441 NA NA NA 605 162 130 NA NA 462 ... ## $ sch_friend311: int 483 NA NA NA 452 NA 148 NA NA 484 ... ## $ sch_friend312: int 375 NA NA NA 470 NA 192 NA NA 487 ... ## $ sch_friend313: int NA NA NA NA 446 NA NA NA NA 512 ... ## $ sch_friend314: int NA NA NA NA 582 NA 246 NA NA 619 ... ## $ sch_friend315: int NA NA NA NA 557 NA 278 NA NA 39 ... ## $ sch_friend316: int NA NA NA NA NA NA 311 NA NA 14 ... ## $ sch_friend317: int NA NA NA NA 494 NA 322 NA NA 30 ... ## $ sch_friend318: int NA NA NA NA 167 NA 297 NA NA 35 ... ## $ sch_friend319: int NA NA NA NA 148 NA 443 NA NA 52 ... ## $ sch_friend11 : int NA 424 629 232 582 26 528 NA 135 346 ... ## $ sch_friend12 : int NA 423 505 569 134 488 NA NA 185 168 ... ## $ sch_friend13 : int NA 426 NA NA 41 81 492 NA 553 559 ... ## $ sch_friend14 : int NA 289 NA NA 592 138 395 NA 84 5 ... ## $ sch_friend15 : int NA 321 NA NA 68 2 NA NA 201 411 ... ## $ sch_friend16 : int NA NA NA NA 554 339 NA NA NA 283 ... ## $ sch_friend17 : int NA NA NA NA 202 502 NA NA NA NA ... ## $ sch_friend18 : int NA NA 146 NA NA NA 30 NA NA 1 ... ## $ sch_friend19 : int NA NA 145 NA NA NA 385 NA NA 20 ... ## $ sch_friend110: int NA NA 567 NA NA NA 378 NA NA 44 ... ## $ sch_friend111: int NA NA NA NA NA NA 373 NA NA 64 ... ## $ sch_friend112: int NA NA NA NA NA NA 337 NA NA 119 ... ## $ sch_friend113: int NA NA NA NA NA NA 386 NA NA 67 ... ## $ sch_friend114: int NA NA NA NA NA NA 433 NA NA 115 ... ## $ sch_friend115: int NA NA NA NA NA NA 391 NA NA 166 ... ## $ sch_friend116: int NA NA NA NA NA NA 564 NA NA NA ... ## $ sch_friend117: int NA NA NA NA NA NA NA NA NA NA ... ## $ sch_friend118: int NA NA NA NA NA NA NA NA NA NA ... ## $ sch_friend119: int NA NA NA NA NA NA NA NA NA NA ... ## $ sch_friend21 : int NA NA 629 569 10 502 492 NA 135 346 ... ## $ sch_friend22 : int NA 443 505 NA 557 225 528 NA 185 168 ... ## $ sch_friend23 : int NA NA 575 NA 41 549 541 NA NA NA ... ## $ sch_friend24 : int NA NA NA NA 68 81 190 NA 305 411 ... ## $ sch_friend25 : int NA NA NA NA NA 26 192 NA 553 279 ... ## $ sch_friend26 : int NA NA NA NA 582 49 310 NA 213 221 ... ## $ sch_friend27 : int NA NA NA NA NA 506 334 NA 56 NA ... ## $ sch_friend28 : int NA NA 629 NA NA NA 246 NA NA NA ... ## $ sch_friend29 : int NA NA 575 NA NA NA 22 NA NA NA ... ## $ sch_friend210: int NA NA 505 NA NA NA 46 NA NA NA ... ## $ sch_friend211: int NA NA 145 NA NA NA 27 NA NA NA ... ## $ sch_friend212: int NA NA 371 NA NA NA 49 NA NA NA ... ## $ sch_friend213: int NA NA 567 NA NA NA 97 NA NA NA ... ## $ sch_friend214: int NA NA 368 NA NA NA 273 NA NA NA ... ## $ sch_friend215: int NA NA NA NA NA NA 337 NA NA NA ... ## $ sch_friend216: int NA NA NA NA NA NA NA NA NA NA ... ## $ sch_friend217: int NA NA NA NA NA NA 372 NA NA NA ... ## $ sch_friend218: int NA NA NA NA NA NA 366 NA NA NA ... ## $ sch_friend219: int NA NA NA NA NA NA 357 NA NA NA ... ## $ id : num 1110001 1110002 1110007 1110013 1110014 ... Besides of having nice syntax, dplyr offers optimized routines to handle your data. I personally use it specifically for that, as that can be nice when you are dealing with relatively large datasets.↩ "],
["applications.html", "Chapter 5 Applications 5.1 Example one 5.2 Example two", " Chapter 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],
["final-words.html", "Chapter 6 Final Words", " Chapter 6 Final Words We have finished a nice book. "],
["references.html", "References", " References "]
]
